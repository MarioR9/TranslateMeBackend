continue
contniue
cateImg[0]
cateImg[1]
cateImg[2]
cateImg[1]
cateImg[0]
cateImg.length[2]
cateImg.length[1]
cateImg.length[0]
cateImg.length
cateImg
continue
cateImg
cateImg.length
cateImg
exit
continuecontinue
continue
continuecontinue
continue
cateImg.length
cateImg.lengh
cateImg
cateImh
continue
params
copiedCate.title
copiedCate
copiedCate.user_id
copiedCate.user_id = 1
copiedCate.user_id = params[:userId]
params
copiedCate
continue
copiedCate
continue
params
continue
params
continue
params
continue
          result = classes.result
          classes = visual_recognition.classify({url: url})
          url= params[:imgUrl]
          )
            iam_apikey: VISUAL_KEY
            version: VISUAL_VERSION,
visual_recognition = VisualRecognitionV3.new(
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
contineu
continue
exit
xit
continue
contniue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
contniue
continue
params
continue
params
continue
params
continue
arr
@arryOfResults
arrOfRes
result
continue
i
arr
Arry
arr
continue
params
continue
@hashOfResults
continue
result
continue
@hashOfResults
params
@arrayOfResults
continue
  arryOfResults[0]
  arryOfResults
  arryOfResults = hashOfResults.map {|result| result["class"]}
hashOfResults = result.first[1][0].first[1].first["classes"].select { |hash| hash["score"] >=  0.9 }
final.map {|x|x["class"]}m
final = result.first[1][0].first[1].first["classes"].select { |hash| hash["score"] >=  0.9 
final = result.first[1][0].first[1].first["classes"].select { |hash| hash[:score] == 0.9 }
final = result.first[1][0].first[1].first["classes"].select { |hash| hash[:score] >= 0.9 }
result
result.first[1]
result.first[1].classifiers
result.first[1].name
result.first[1]
result.first[2]
result.first[1]
result.first[0]
result.first[1]
result.first[1].classes
result.first[1].classes.first
result.first[1].classes
result.first[1]
result.first[0]
result.first
result.first.images
result.first
result
result[1]
result[0]
result
result.images[0]
result.images
result
continue
classes
classes.result.classes
classes.result.classifiers
classes.result[images]
classes.result
classes.result.images[0]
classes.result
classes.result.images
classes.result[0]
classes.result.images
classes.result
classes.result.images[0].classifiers[0].classes
classrs.result.images[0].classifiers[0].classes
clasess.result.images[0].classifiers[0].classes
classes.result
result
arr
continue
token
payload
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
prams
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params
continue
params[:format]
params[:files]
params
continue
params
continue
params[:files]
params[:files].name
params[:files]
params[:files].@tempfile
params[:files]
params
continue
params
continue
params
continue
cotinue
params
continue
params
continue
params
